Java 8 among other things introduces the class Optional (and its siblings OptionalInt, OptionalLong and OptionalDouble), this blog post tries to explain why we have introduced such classes and how to use it.

[Optional](http://docs.oracle.com/javase/8/docs/api/java/util/Optional.html) had been introduced in the Java API to deal with the case where the result of a calculation can exist or not.

Here is an example, let suppose I have an object that record the duration of a call to a service, the service is called multiple times and for each call, the object record the time spent in the service. Moreover, this object keeps several values to be able compute the average time spent in the service.
 
```
public class TimeStat {
  private long totalTime;
  private long recordCount;

  public void record(long elapsedTime) {
    totalTime += elapsedTime;
    recordCount++;
  }

  public double getAverageTime() {
    return ((double)totalTime) / recordCount;
  }
}
```

Now, let suppose we also want to keep the minimum time spent in the service. In term of API, it's a little more complex because if no time is recorded, there is no minimum, so getMinimumTime() can not just return a long integer.

```
public class TimeStat {
  public long getMinimumTime() {
    return ...
  }
}
```

The return type of getMinimumTime() should represent either a long integer value or no value. This is exactly what [java.util.OptionalLong](http://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html) is. OptionalLong has two factory methods, [empty()](http://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html#empty--) that creates an OptionalLong whith no value and [of()](http://docs.oracle.com/javase/8/docs/api/java/util/OptionalLong.html#of-long-) that creates an OptionalLong with a value.
So the code of TimeStat is

```
public class TimeStat {
  private long totalTime;
  private long recordCount;
  private long minimumTime;

  public void record(long elapsedTime) {
    totalTime += elapsedTime;
    minimumTime = (recordCount == 0)? elapsedTime:
                                      Math.min(minimumTime, elapsedTime);
    recordCount++;
  }

  public OptionalLong getMinimumTime() {
    if (recordCount == 0) {
      return OptionalLong.empty();
    }
    return OptionalLong.of(minimumTime);
  }
}
```

Note that before Java 8, instead of OptionalLong, one can use java.lang.Long with the convention that null encode no value.
In that case, the code of getMinimum() will be

```
  public Long getMinimumTime() {
    if (recordCount == 0) {
      return null;
    }
    return Long.valueOf(minimumTime);
  }
```

The problem with that code is that you have to document that null means no value (even if it's the traditional meaning, it has to be documented) and worst because nobody read the doc, users of the class TimeStat will forget that getMinimum() can return null and their code will throw a NullPointerException.

So compared to java.lang.Long, java.util.OptionalLong make the contract more explicit and avoid NullPointerException in the client code. We will see later that there is also an important difference in the way of OptionalLong is specified.

Note that creating an OptionalLong is a form of boxing so one may think that there is cost to use the Optional abstraction.
This is not true *in this example* because the VM is able to remove the creation of OptionalLong. If getMinimum() is not too big, the VM will take the code of getMinimum() and merge it with the code that calls getMinimum(), an operation known as inlining, by doing that the code that create the OptionalLong and the code that use it will be part of the same bundle and so the VM will see that the allocation of an OptionalLong instance is not needed.

This is really great because API designers can use Optional to explicit the contract of getMinimum() and users will not pay the cost of the abstraction.

But this is not always the case ...


### Storing Optional in a field ?

Let now suppose that i want to design a class corresponding to a report with an optional header.
One can come with that code

```
public class Report {
  private final Optional<String> header;

  public Report(Optional<String> header) {
    this.header = header;
  }
  
  public Optional<String> getHeader() {
    return header;
  }
}
```

while it's a valid code, this code pay the price of using OptionalLong as an abstraction. In fact, storing an Optional into a field introduce two supplementary costs:
   - A cost in term of memory, Optional is an object, at least for now, so the code will allocate an Optional object (an object header + the size of the two fields, with a heap < 32G it's 16 bytes)
   - A cost at runtime, each time a code will access to the field header to get the string value, it will cost a supplementary indirection. And this indirection is not cheap because the reference to a Report and the reference to Optional may not be in the same cache line so accessing to the string inside may result in a cache miss.

There is a way to mitigate those costs and keep the Optional abstraction. Optional is great for the user that want to use the API, but it can be seen as not necessary inside the object. So inside the object, the header can be null and outside the object it can be represented by Optional.

```
public class Report {
  private final /* may be null */ String header;

  public Report(Optional<String> header) {
    this.header = header.orElse(null);
  }
  
  public Optional<String> getHeader() {
    return Optional.ofNullable(header);
  }
}
```

With this code, Optional instances are kept on the stack where we know that the VM will optimize them away avoiding the cost of objects creation and because Optional is not stored in a field, we can expect no supplementary cost.


### Can the supplementary costs of storing an Optional in a field vanish ?

yes and no. Currently, with Java 8, the answer is no.
In the future, let say with Java 9, the anwser may be yes :)

The idea is that the VM can take the fields of Optional and store then with the fields of the class Report, something which is called co-location. The memory cost will be a little higher (a supplementary field) but no supplementary indirection.

This is not possible to do that with plain Java objects because a Java object by default has an identity and when you store the fields of Optional inside Report, the instance of Optional disapear, so its identity is lost (note that its class is also lost but java.util.Optional has no subclass unlike Option in Scala).

What we want to do for Java 9, is to add a way to specify that an object has no identity, something which is commonly referenced
as a [value object](https://en.wikipedia.org/wiki/Value_object). For this kind of object, the VM will be free to flatten all the fields of a value object inside an enclosing object.

There is already a [strawman proposal of the value object semantics](http://cr.openjdk.java.net/~jrose/values/values-0.html) for Java 9.


### Conclusion

And to finish, you should never forget that even if you use Optional, having something that can have no value is not free because it makes the user code less simple to write. It's far better to avoid to return either Optional or null, by example, for the class Report, instead of having no value the header can be empty (the String ""). Using [Objects.requireNonNull()](http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html) in the constructor, will guarantee that the value returned by getHeader() always exist simplifying all user codes.

```
public class Report {
  private final String header;   // may be empty but not null

  public Report(String header) {
    this.header = Objects.requireNonNull(header);
  }
  
  public String getHeader() {
    return header
  }
}
```

cheers,
RÃ©mi

